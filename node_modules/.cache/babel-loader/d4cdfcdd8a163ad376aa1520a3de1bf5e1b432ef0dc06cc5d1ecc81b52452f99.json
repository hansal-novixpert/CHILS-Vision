{"ast":null,"code":"import React,{useState}from'react';import{Table,Input,Button,message}from'antd';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GetInventoryTable=()=>{const[warehouseId,setWarehouseId]=useState('');const[tableData,setTableData]=useState([]);const[loading,setLoading]=useState(false);const handleInputChange=e=>{setWarehouseId(e.target.value);};const handleUpdateClick=async()=>{if(!warehouseId){message.error('Please enter a Warehouse ID');return;}const apiKey='qUupP6epE11uOMW8gAVnW2HBgPdiSR0y34nKkYSk';// Replace with your actual API key\nconst apiEndpoint=\"https://j08vu3l062.execute-api.us-east-1.amazonaws.com/prod/inventory/\".concat(warehouseId);setLoading(true);try{const response=await axios.get(apiEndpoint,{headers:{'x-api-key':\"\".concat(apiKey)}});if(response.status===200){message.success('Data fetched successfully!');console.log(response.data);// Check API response in console\nconst transformedData=response.data.map(notification=>({item_id:notification.item_id.S,item_name:notification.item_name.S,// Placeholder, use actual item_name if available\nitem_count:parseInt(notification.item_count.N,10)// Convert count to number\n}));setTableData(transformedData);// Assuming response.data is an array of items\n}else{message.error('Failed to fetch data.');}}catch(error){console.error('API call error:',error);message.error('An error occurred while fetching data.');}finally{setLoading(false);}};const columns=[{title:'Item Name',dataIndex:'item_name',key:'item_name'},{title:'Item ID',dataIndex:'item_id',key:'item_id'},{title:'Count',dataIndex:'item_count',key:'item_count'}];return/*#__PURE__*/_jsxs(\"div\",{style:{padding:24,background:'#fff'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',marginBottom:16},children:[/*#__PURE__*/_jsx(Input,{placeholder:\"Enter Warehouse ID\",value:warehouseId,onChange:handleInputChange,style:{marginRight:8,width:'200px'}}),/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:handleUpdateClick,loading:loading,children:\"Get Your Inventory\"})]}),/*#__PURE__*/_jsx(Table,{columns:columns,dataSource:tableData,loading:loading,rowKey:\"item_id\"// Assuming item_id is unique for each row\n})]});};export default GetInventoryTable;","map":{"version":3,"names":["React","useState","Table","Input","Button","message","axios","jsx","_jsx","jsxs","_jsxs","GetInventoryTable","warehouseId","setWarehouseId","tableData","setTableData","loading","setLoading","handleInputChange","e","target","value","handleUpdateClick","error","apiKey","apiEndpoint","concat","response","get","headers","status","success","console","log","data","transformedData","map","notification","item_id","S","item_name","item_count","parseInt","N","columns","title","dataIndex","key","style","padding","background","children","display","marginBottom","placeholder","onChange","marginRight","width","type","onClick","dataSource","rowKey"],"sources":["/home/hansal/Documents/CHILS/CHILS-interface/CHILS/src/components/GetInventoryTable.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Table, Input, Button, message } from 'antd';\nimport axios from 'axios';\n\nconst GetInventoryTable = () => {\n  const [warehouseId, setWarehouseId] = useState('');\n  const [tableData, setTableData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const handleInputChange = (e) => {\n    setWarehouseId(e.target.value);\n  };\n\n  const handleUpdateClick = async () => {\n    if (!warehouseId) {\n      message.error('Please enter a Warehouse ID');\n      return;\n    }\n\n    const apiKey = 'qUupP6epE11uOMW8gAVnW2HBgPdiSR0y34nKkYSk'; // Replace with your actual API key\n    const apiEndpoint = `https://j08vu3l062.execute-api.us-east-1.amazonaws.com/prod/inventory/${warehouseId}`;\n\n    setLoading(true);\n\n    try {\n      const response = await axios.get(apiEndpoint, {\n        headers: {\n          'x-api-key': `${apiKey}`,\n        },\n      });\n\n      if (response.status === 200) {\n        message.success('Data fetched successfully!');\n        console.log(response.data); // Check API response in console\n        const transformedData = response.data.map(notification => ({\n          item_id: notification.item_id.S,\n          item_name: notification.item_name.S, // Placeholder, use actual item_name if available\n          item_count: parseInt(notification.item_count.N, 10), // Convert count to number\n        }));\n        setTableData(transformedData); // Assuming response.data is an array of items\n      } else {\n        message.error('Failed to fetch data.');\n      }\n    } catch (error) {\n      console.error('API call error:', error);\n      message.error('An error occurred while fetching data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Item Name',\n      dataIndex: 'item_name',\n      key: 'item_name',\n    },\n    {\n      title: 'Item ID',\n      dataIndex: 'item_id',\n      key: 'item_id',\n    },\n    {\n      title: 'Count',\n      dataIndex: 'item_count',\n      key: 'item_count',\n    },\n  ];\n\n  return (\n    <div style={{ padding: 24, background: '#fff' }}>\n      <div style={{ display: 'flex', marginBottom: 16 }}>\n        <Input\n          placeholder=\"Enter Warehouse ID\"\n          value={warehouseId}\n          onChange={handleInputChange}\n          style={{ marginRight: 8, width: '200px' }}\n        />\n        <Button type=\"primary\" onClick={handleUpdateClick} loading={loading}>\n          Get Your Inventory\n        </Button>\n      </div>\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        loading={loading}\n        rowKey=\"item_id\" // Assuming item_id is unique for each row\n      />\n    </div>\n  );\n};\n\nexport default GetInventoryTable;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,KAAK,CAAEC,KAAK,CAAEC,MAAM,CAAEC,OAAO,KAAQ,MAAM,CACpD,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,KAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACa,SAAS,CAAEC,YAAY,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACe,OAAO,CAAEC,UAAU,CAAC,CAAGhB,QAAQ,CAAC,KAAK,CAAC,CAE7C,KAAM,CAAAiB,iBAAiB,CAAIC,CAAC,EAAK,CAC/BN,cAAc,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAChC,CAAC,CAED,KAAM,CAAAC,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CAACV,WAAW,CAAE,CAChBP,OAAO,CAACkB,KAAK,CAAC,6BAA6B,CAAC,CAC5C,OACF,CAEA,KAAM,CAAAC,MAAM,CAAG,0CAA0C,CAAE;AAC3D,KAAM,CAAAC,WAAW,0EAAAC,MAAA,CAA4Ed,WAAW,CAAE,CAE1GK,UAAU,CAAC,IAAI,CAAC,CAEhB,GAAI,CACF,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAArB,KAAK,CAACsB,GAAG,CAACH,WAAW,CAAE,CAC5CI,OAAO,CAAE,CACP,WAAW,IAAAH,MAAA,CAAKF,MAAM,CACxB,CACF,CAAC,CAAC,CAEF,GAAIG,QAAQ,CAACG,MAAM,GAAK,GAAG,CAAE,CAC3BzB,OAAO,CAAC0B,OAAO,CAAC,4BAA4B,CAAC,CAC7CC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACO,IAAI,CAAC,CAAE;AAC5B,KAAM,CAAAC,eAAe,CAAGR,QAAQ,CAACO,IAAI,CAACE,GAAG,CAACC,YAAY,GAAK,CACzDC,OAAO,CAAED,YAAY,CAACC,OAAO,CAACC,CAAC,CAC/BC,SAAS,CAAEH,YAAY,CAACG,SAAS,CAACD,CAAC,CAAE;AACrCE,UAAU,CAAEC,QAAQ,CAACL,YAAY,CAACI,UAAU,CAACE,CAAC,CAAE,EAAE,CAAG;AACvD,CAAC,CAAC,CAAC,CACH5B,YAAY,CAACoB,eAAe,CAAC,CAAE;AACjC,CAAC,IAAM,CACL9B,OAAO,CAACkB,KAAK,CAAC,uBAAuB,CAAC,CACxC,CACF,CAAE,MAAOA,KAAK,CAAE,CACdS,OAAO,CAACT,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACvClB,OAAO,CAACkB,KAAK,CAAC,wCAAwC,CAAC,CACzD,CAAC,OAAS,CACRN,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAA2B,OAAO,CAAG,CACd,CACEC,KAAK,CAAE,WAAW,CAClBC,SAAS,CAAE,WAAW,CACtBC,GAAG,CAAE,WACP,CAAC,CACD,CACEF,KAAK,CAAE,SAAS,CAChBC,SAAS,CAAE,SAAS,CACpBC,GAAG,CAAE,SACP,CAAC,CACD,CACEF,KAAK,CAAE,OAAO,CACdC,SAAS,CAAE,YAAY,CACvBC,GAAG,CAAE,YACP,CAAC,CACF,CAED,mBACErC,KAAA,QAAKsC,KAAK,CAAE,CAAEC,OAAO,CAAE,EAAE,CAAEC,UAAU,CAAE,MAAO,CAAE,CAAAC,QAAA,eAC9CzC,KAAA,QAAKsC,KAAK,CAAE,CAAEI,OAAO,CAAE,MAAM,CAAEC,YAAY,CAAE,EAAG,CAAE,CAAAF,QAAA,eAChD3C,IAAA,CAACL,KAAK,EACJmD,WAAW,CAAC,oBAAoB,CAChCjC,KAAK,CAAET,WAAY,CACnB2C,QAAQ,CAAErC,iBAAkB,CAC5B8B,KAAK,CAAE,CAAEQ,WAAW,CAAE,CAAC,CAAEC,KAAK,CAAE,OAAQ,CAAE,CAC3C,CAAC,cACFjD,IAAA,CAACJ,MAAM,EAACsD,IAAI,CAAC,SAAS,CAACC,OAAO,CAAErC,iBAAkB,CAACN,OAAO,CAAEA,OAAQ,CAAAmC,QAAA,CAAC,oBAErE,CAAQ,CAAC,EACN,CAAC,cACN3C,IAAA,CAACN,KAAK,EACJ0C,OAAO,CAAEA,OAAQ,CACjBgB,UAAU,CAAE9C,SAAU,CACtBE,OAAO,CAAEA,OAAQ,CACjB6C,MAAM,CAAC,SAAU;AAAA,CAClB,CAAC,EACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAlD,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}